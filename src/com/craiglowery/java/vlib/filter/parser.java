
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.craiglowery.java.vlib.filter;

import java_cup.runtime.*;
import java.util.TreeSet;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\003\005\000\002\004" +
    "\005\000\002\004\003\000\002\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\026\007\016\010\013\012\007\014\011\015" +
    "\017\017\004\020\005\021\010\022\006\023\015\001\002" +
    "\000\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\011\ufffe\001" +
    "\002\000\014\002\ufff9\004\ufff9\005\ufff9\006\ufff9\011\ufff9" +
    "\001\002\000\014\002\ufffa\004\ufffa\005\ufffa\006\ufffa\011" +
    "\ufffa\001\002\000\010\013\ufff0\016\ufff0\020\033\001\002" +
    "\000\014\002\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\001" +
    "\002\000\014\002\ufffd\004\ufffd\005\ufffd\006\ufffd\011\ufffd" +
    "\001\002\000\014\002\ufff7\004\ufff7\005\ufff7\006\ufff7\011" +
    "\ufff7\001\002\000\026\007\016\010\013\012\007\014\011" +
    "\015\017\017\004\020\005\021\010\022\006\023\015\001" +
    "\002\000\012\002\027\004\023\005\021\006\022\001\002" +
    "\000\014\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011\ufff8\001" +
    "\002\000\026\007\016\010\013\012\007\014\011\015\017" +
    "\017\004\020\005\021\010\022\006\023\015\001\002\000" +
    "\014\002\ufffc\004\ufffc\005\ufffc\006\ufffc\011\ufffc\001\002" +
    "\000\014\002\uffff\004\023\005\uffff\006\uffff\011\uffff\001" +
    "\002\000\026\007\016\010\013\012\007\014\011\015\017" +
    "\017\004\020\005\021\010\022\006\023\015\001\002\000" +
    "\026\007\016\010\013\012\007\014\011\015\017\017\004" +
    "\020\005\021\010\022\006\023\015\001\002\000\026\007" +
    "\016\010\013\012\007\014\011\015\017\017\004\020\005" +
    "\021\010\022\006\023\015\001\002\000\012\002\ufff6\005" +
    "\ufff6\006\ufff6\011\ufff6\001\002\000\014\002\ufff5\004\023" +
    "\005\ufff5\006\ufff5\011\ufff5\001\002\000\014\002\ufff4\004" +
    "\023\005\ufff4\006\022\011\ufff4\001\002\000\004\002\001" +
    "\001\002\000\012\004\023\005\021\006\022\011\031\001" +
    "\002\000\014\002\000\004\000\005\000\006\000\011\000" +
    "\001\002\000\006\013\035\016\034\001\002\000\006\013" +
    "\ufff1\016\ufff1\001\002\000\004\020\036\001\002\000\014" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\011\ufff3\001\002\000" +
    "\006\013\ufff2\016\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\002\013\003\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\027\003\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\017\003\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\025\003\011" +
    "\001\001\000\006\002\024\003\011\001\001\000\006\002" +
    "\023\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		private ExpressionFactory factory;
		
		public parser(
			java_cup.runtime.Scanner s, 
			ExpressionFactory factory
			) 
		{
				super(s);
				this.factory=factory;
		}
		
		public void syntax_error(Symbol cur_token) 
		{
			throw new RuntimeException("ExprParsingException Wrapper",
				new ExprParsingException("Syntax error",null,cur_token.left)
				);
		}

	

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionFactory.Expr start_val = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expression ::= OPEN_PAREN_TOKEN expression CLOSE_PAREN_TOKEN 
            {
              ExpressionFactory.Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionFactory.Expr e = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= BOOLEAN_NOT_OPERATOR expression 
            {
              ExpressionFactory.Expr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionFactory.Operator op = (ExpressionFactory.Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionFactory.Expr e = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					try {
						RESULT = factory.createUnaryOperation(op,e);
					} catch (ExprException ex) {
						throw new ExprParsingException(ex.getMessage(),null,opleft);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= ATTRIBUTE_NAME_STRING 
            {
              ExpressionFactory.Expr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					try {
						RESULT = factory.createAttribute(name);
					} catch (ExprException ex) {
						throw new ExprParsingException(ex.getMessage(),null,nameleft);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= TRUE_TOKEN 
            {
              ExpressionFactory.Expr RESULT =null;
		
					RESULT = factory.new BooleanLiteralExpr(true); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= FALSE_TOKEN 
            {
              ExpressionFactory.Expr RESULT =null;
		 
					RESULT = factory.new BooleanLiteralExpr(false); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= GENERAL_VALUE_DOUBLE 
            {
              ExpressionFactory.Expr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = factory.new DoubleLiteralExpr(d);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= GENERAL_VALUE_INTEGER 
            {
              ExpressionFactory.Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = factory.new IntegerLiteralExpr(i); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= GENERAL_VALUE_STRING 
            {
              ExpressionFactory.Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = factory.new StringLiteralExpr(s); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= TIMESTAMP_VALUE_STRING 
            {
              ExpressionFactory.Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					s=s.trim();
					if (s.equals(""))
						RESULT = factory.new TimeStampLiteralExpr();
					else
						RESULT = factory.new TimeStampLiteralExpr(s);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= tag_literal_expression 
            {
              ExpressionFactory.Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionFactory.TagLiteralExpr e = (ExpressionFactory.TagLiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = e; 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expression COMPARISON_OPERATOR expression 
            {
              ExpressionFactory.Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionFactory.Expr e1 = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionFactory.Operator op = (ExpressionFactory.Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionFactory.Expr e2 = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					try {
						RESULT = factory.createBinaryOperation(e1,op,e2);
					} catch (ExprException ex) {
						throw new ExprParsingException(ex.getMessage(),null,opleft);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= expression BOOLEAN_AND_OPERATOR expression 
            {
              ExpressionFactory.Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionFactory.Expr e1 = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionFactory.Operator op = (ExpressionFactory.Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionFactory.Expr e2 = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					try {
						RESULT = factory.createBinaryOperation(e1,op,e2);
					} catch (ExprException ex) {
						throw new ExprParsingException(ex.getMessage(),null,opleft);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression BOOLEAN_OR_OPERATOR expression 
            {
              ExpressionFactory.Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionFactory.Expr e1 = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionFactory.Operator op = (ExpressionFactory.Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionFactory.Expr e2 = (ExpressionFactory.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					try {
						RESULT = factory.createBinaryOperation(e1,op,e2);
					} catch (ExprException ex) {
						throw new ExprParsingException(ex.getMessage(),null,opleft);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tag_literal_expression ::= OPEN_BRACKET_TOKEN tag_value_list CLOSE_BRACKET_TOKEN 
            {
              ExpressionFactory.TagLiteralExpr RESULT =null;
		int tsetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeSet<String> tset = (TreeSet<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = factory.new TagLiteralExpr(new TagType(tset));
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_literal_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tag_value_list ::= tag_value_list COMMA_TOKEN GENERAL_VALUE_STRING 
            {
              TreeSet<String> RESULT =null;
		int tsetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeSet<String> tset = (TreeSet<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					try {
						tset.add(s);
						RESULT = tset;
					} catch (Exception ex) {
						throw new ExprParsingException("Unable to add value to tag set",null,sleft);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_value_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tag_value_list ::= GENERAL_VALUE_STRING 
            {
              TreeSet<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					try {
						TreeSet<String> tset = new TreeSet<String>();
						tset.add(s);
						RESULT = tset;
					} catch (Exception ex) {
						throw new RuntimeException("ExprException Wrapper",
						new ExprException(String.format("Unable to add item to TreeSet (2) '%s'",s),ex)
						);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_value_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tag_value_list ::= 
            {
              TreeSet<String> RESULT =null;
		
					try {
						RESULT = new TreeSet<String>();
					} catch (Exception ex) {
						throw new RuntimeException("ExprException Wrapper",
						new ExprException("Unable to instantiate empty TreeSet",ex)
						);
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_value_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
