
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.craiglowery.java.vlib.tuple.filterexp;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class StringExpressionParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return StringExpressionSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public StringExpressionParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public StringExpressionParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StringExpressionParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\022\007\006\010\014\012\010\013\005\014" +
    "\012\015\007\016\004\017\011\001\002\000\014\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\011\ufff7\001\002\000\014\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\011\ufffa\001\002\000\014" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\001\002\000" +
    "\014\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011\ufff8\001\002" +
    "\000\022\007\006\010\014\012\010\013\005\014\012\015" +
    "\007\016\004\017\011\001\002\000\014\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\011\ufff6\001\002\000\014\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\011\ufff9\001\002\000\012\002\025" +
    "\004\021\005\017\006\016\001\002\000\022\007\006\010" +
    "\014\012\010\013\005\014\012\015\007\016\004\017\011" +
    "\001\002\000\012\004\021\005\017\006\016\011\020\001" +
    "\002\000\022\007\006\010\014\012\010\013\005\014\012" +
    "\015\007\016\004\017\011\001\002\000\022\007\006\010" +
    "\014\012\010\013\005\014\012\015\007\016\004\017\011" +
    "\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006\ufffd\011" +
    "\ufffd\001\002\000\022\007\006\010\014\012\010\013\005" +
    "\014\012\015\007\016\004\017\011\001\002\000\014\002" +
    "\001\004\001\005\001\006\001\011\001\001\002\000\014" +
    "\002\uffff\004\021\005\uffff\006\uffff\011\uffff\001\002\000" +
    "\014\002\ufffe\004\021\005\ufffe\006\ufffe\011\ufffe\001\002" +
    "\000\004\002\000\001\002\000\014\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\011\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\004\002\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\014\001\001\000\002\001\001" +
    "\000\004\002\023\001\001\000\004\002\022\001\001\000" +
    "\002\001\001\000\004\002\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StringExpressionParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StringExpressionParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StringExpressionParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		String inputString = "---input string not known---";
		java.util.List<String> errorList = null;
	
		TupleExpressionFactory ef;
		public StringExpressionParser(String s, TupleExpressionFactory ef, java.util.List<String> errors) {
			super(new StringExpressionScanner(new java.io.StringReader(s)));
			inputString = s;
			this.ef = ef;
			errorList = errors;
		}
		
		public class ParserException extends FilterExpressionException {
			Object info;
			public ParserException(String message, Object info) {
				super(message);
				this.info = info;
			}		
		} 
		
		public void report_error(String message, Object info) {
			errorList.add(String.format("%s: %s",message,info==null?"no additional information":info.toString()));
		}
		
		public void report_fatal_error(String message, Object info) {
			report_error(message,info);
			done_parsing();
		}


	

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$StringExpressionParser$actions {
  private final StringExpressionParser parser;

  /** Constructor */
  CUP$StringExpressionParser$actions(StringExpressionParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$StringExpressionParser$do_action_part00000000(
    int                        CUP$StringExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$StringExpressionParser$parser,
    java.util.Stack            CUP$StringExpressionParser$stack,
    int                        CUP$StringExpressionParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StringExpressionParser$result;

      /* select the action based on the action number */
      switch (CUP$StringExpressionParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expression ::= expression COMPARISON_OPERATOR expression 
            {
              TupleExpressionFactory.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).right;
		TupleExpressionFactory.Node e1 = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		TupleExpressionFactory.Node e2 = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.comp(e1,op,e2); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).right;
		TupleExpressionFactory.Node start_val = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).value;
		RESULT = start_val;
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StringExpressionParser$parser.done_parsing();
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= expression AND_OPERATOR expression 
            {
              TupleExpressionFactory.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).right;
		TupleExpressionFactory.Node e1 = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		TupleExpressionFactory.Node e2 = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.and(e1,e2); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= expression OR_OPERATOR expression 
            {
              TupleExpressionFactory.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).right;
		TupleExpressionFactory.Node e1 = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		TupleExpressionFactory.Node e2 = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.or(e1,e2); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= OPENPAREN expression CLOSEPAREN 
            {
              TupleExpressionFactory.Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).right;
		TupleExpressionFactory.Node e1 = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)).value;
		 RESULT = e1; 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= NOT_OPERATOR expression 
            {
              TupleExpressionFactory.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		TupleExpressionFactory.Node e = (TupleExpressionFactory.Node)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.not(e); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.elementAt(CUP$StringExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= ATTRIBUTE 
            {
              TupleExpressionFactory.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		  RESULT = ef.attribute(e); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= TRUE 
            {
              TupleExpressionFactory.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.litBoolean(true); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= FALSE 
            {
              TupleExpressionFactory.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.litBoolean(false); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= STRING 
            {
              TupleExpressionFactory.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.litString(e); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= INTEGER 
            {
              TupleExpressionFactory.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		Long e = (Long)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.litLong(e); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= DOUBLE 
            {
              TupleExpressionFactory.Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$StringExpressionParser$stack.peek()).value;
		 RESULT = ef.litDouble(e); 
              CUP$StringExpressionParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StringExpressionParser$stack.peek()), RESULT);
            }
          return CUP$StringExpressionParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$StringExpressionParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$StringExpressionParser$do_action(
    int                        CUP$StringExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$StringExpressionParser$parser,
    java.util.Stack            CUP$StringExpressionParser$stack,
    int                        CUP$StringExpressionParser$top)
    throws java.lang.Exception
    {
              return CUP$StringExpressionParser$do_action_part00000000(
                               CUP$StringExpressionParser$act_num,
                               CUP$StringExpressionParser$parser,
                               CUP$StringExpressionParser$stack,
                               CUP$StringExpressionParser$top);
    }
}

}
